AWSTemplateFormatVersion: '2010-09-09'
Description: 'CTF Environment with CTFd, OpenVPN, and MultiJuicer on AWS'

Parameters:
  KeyName:
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instances'
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: 'CTF-VPC'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet2'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'CTF-IGW'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'PublicRouteTable'

  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroupOpenVPN:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow OpenVPN traffic'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'udp'
          FromPort: 1194
          ToPort: 1194
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'

  SecurityGroupCTFd:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP and HTTPS traffic'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'

  SecurityGroupEKS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow Kubernetes traffic'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'

  OpenVPNInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't3.medium'
      KeyName: !Ref KeyName
      ImageId: 'ami-0c55b159cbfafe1f0' # Update with a relevant AMI ID
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet
          GroupSet: 
            - !Ref SecurityGroupOpenVPN
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y openvpn easy-rsa
          make-cadir ~/openvpn-ca
          cd ~/openvpn-ca
          source vars
          ./clean-all
          ./build-ca
          ./build-key-server server
          ./build-dh
          openvpn --genkey --secret keys/ta.key
          cp keys/{server.crt,server.key,ca.crt,dh2048.pem,ta.key} /etc/openvpn
          gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz > /etc/openvpn/server.conf
          echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
          sysctl -p
          systemctl start openvpn@server
          systemctl enable openvpn@server

  CTFdInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't3.medium'
      KeyName: !Ref KeyName
      ImageId: 'ami-0c55b159cbfafe1f0' # Update with a relevant AMI ID
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnet1
          GroupSet: 
            - !Ref SecurityGroupCTFd
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y docker.io
          systemctl start docker
          systemctl enable docker
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          git clone https://github.com/CTFd/CTFd.git /home/ubuntu/CTFd
          cd /home/ubuntu/CTFd
          docker-compose up -d

  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: 'ctf-rds'
      DBInstanceClass: 'db.t3.micro'
      Engine: 'mysql'
      MasterUsername: 'admin'
      MasterUserPassword: 'password'
      AllocatedStorage: '20'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref SecurityGroupCTFd
      PubliclyAccessible: false

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'CTF RDS Subnet Group'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: 'ctf-eks-cluster'
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref SecurityGroupEKS
      RoleArn: 'arn:aws:iam::YOUR_ACCOUNT_ID:role/eksClusterRole' # Replace with your EKS cluster role ARN

  NodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: 'arn:aws:iam::YOUR_ACCOUNT_ID:role/eksNodeRole' # Replace with your EKS node role ARN
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      InstanceTypes: ['t3.medium']
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2

Outputs:
  VPNServerPublicIP:
    Description: 'Public IP of the OpenVPN server'
    Value: !GetAtt OpenVPNInstance.PublicIp
  CTFdURL:
    Description: 'URL of the CTFd instance'
    Value: !Join ['',
      ['http://', !GetAtt CTFdInstance.PrivateDnsName]
    ]
  EKSClusterName:
    Description: 'EKS Cluster Name'
    Value: !Ref EKSCluster
  EKSNodeGroupName:
    Description: 'EKS Node Group Name'
    Value: !Ref NodeGroup
